// <auto-generated />
using System;
using BelowDeckAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BelowDeckAPI.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20210831112936_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.9")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("BelowDeckAPI.Models.Persistence.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Content"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Javascript"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Software"
                        });
                });

            modelBuilder.Entity("BelowDeckAPI.Models.Persistence.Menu", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Menus");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "MainMenu"
                        });
                });

            modelBuilder.Entity("BelowDeckAPI.Models.Persistence.MenuItem", b =>
                {
                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.Property<int>("MenuId")
                        .HasColumnType("int");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.HasKey("PostId", "MenuId");

                    b.HasIndex("MenuId");

                    b.ToTable("MenuItems");

                    b.HasData(
                        new
                        {
                            PostId = 1,
                            MenuId = 1,
                            Order = 0
                        },
                        new
                        {
                            PostId = 2,
                            MenuId = 1,
                            Order = 0
                        });
                });

            modelBuilder.Entity("BelowDeckAPI.Models.Persistence.Post", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created_at")
                        .HasColumnType("datetime2");

                    b.Property<int>("PostTypeId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Update_at")
                        .HasColumnType("datetime2");

                    b.Property<string>("Uri")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("PostTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("Posts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            Content = "Välkommen till min hemsida. ",
                            Created_at = new DateTime(2021, 8, 31, 13, 29, 35, 860, DateTimeKind.Local).AddTicks(8680),
                            PostTypeId = 1,
                            Status = 1,
                            Title = "Home",
                            Update_at = new DateTime(2021, 8, 31, 13, 29, 35, 849, DateTimeKind.Local).AddTicks(4260),
                            Uri = "",
                            UserId = "af0f9a51-1688-4df6-8f3d-eb0af64a8ba6"
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 1,
                            Content = "Om mig",
                            Created_at = new DateTime(2021, 8, 31, 13, 29, 35, 860, DateTimeKind.Local).AddTicks(9250),
                            PostTypeId = 1,
                            Status = 1,
                            Title = "About us",
                            Update_at = new DateTime(2021, 8, 31, 13, 29, 35, 860, DateTimeKind.Local).AddTicks(9240),
                            Uri = "aboutus",
                            UserId = "af0f9a51-1688-4df6-8f3d-eb0af64a8ba6"
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 2,
                            Content = "Headless CMS architecture is rising in popularity in the development world. This model allows breakthrough user experiences, gives developers the great flexibility to innovate, and helps site owners future-proof their builds by allowing them to refresh the design without re-implementing the whole CMS.",
                            Created_at = new DateTime(2021, 8, 31, 13, 29, 35, 860, DateTimeKind.Local).AddTicks(9260),
                            PostTypeId = 2,
                            Status = 1,
                            Title = "Why “Headless CMS” Is Becoming So Popular?",
                            Update_at = new DateTime(2021, 8, 31, 13, 29, 35, 860, DateTimeKind.Local).AddTicks(9260),
                            Uri = "why-headless-cms-is-becoming-so-popular",
                            UserId = "af0f9a51-1688-4df6-8f3d-eb0af64a8ba6"
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 2,
                            Content = "Did you know that JavaScript has a void operator just to explicitly return undefined. Its a unary operator, meaning only one operand can be used with it. You can use it like shown below — standalone or with a parenthesis.",
                            Created_at = new DateTime(2021, 8, 31, 13, 29, 35, 860, DateTimeKind.Local).AddTicks(9260),
                            PostTypeId = 2,
                            Status = 1,
                            Title = "The JavaScript void operator",
                            Update_at = new DateTime(2021, 8, 31, 13, 29, 35, 860, DateTimeKind.Local).AddTicks(9260),
                            Uri = "the-javascript-void-operator",
                            UserId = "af0f9a51-1688-4df6-8f3d-eb0af64a8ba6"
                        });
                });

            modelBuilder.Entity("BelowDeckAPI.Models.Persistence.PostTag", b =>
                {
                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.Property<int>("TagId")
                        .HasColumnType("int");

                    b.HasKey("PostId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("PostTags");
                });

            modelBuilder.Entity("BelowDeckAPI.Models.Persistence.PostType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PostTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Page"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Article"
                        });
                });

            modelBuilder.Entity("BelowDeckAPI.Models.Persistence.Role", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "79d660d1-4e76-4e12-88a6-82751a9fd6a9",
                            ConcurrencyStamp = "6f354c74-a8fb-4ae0-8117-0bddf62783a5",
                            Description = "Administrator with access to all functions",
                            Name = "Admin",
                            NormalizedName = "Administrator"
                        });
                });

            modelBuilder.Entity("BelowDeckAPI.Models.Persistence.Setting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Flags")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Group")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Settings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Flags = "PUBLIC",
                            Group = "site",
                            Key = "title",
                            Type = "string",
                            Value = "BetterDevelopment"
                        },
                        new
                        {
                            Id = 2,
                            Flags = "PUBLIC",
                            Group = "site",
                            Key = "description",
                            Type = "string",
                            Value = "Betterdevelopment is all about helping you get better."
                        },
                        new
                        {
                            Id = 3,
                            Flags = "",
                            Group = "site",
                            Key = "url",
                            Type = "string",
                            Value = "www.betterdevelopment.com"
                        },
                        new
                        {
                            Id = 4,
                            Flags = "PUBLIC",
                            Group = "site",
                            Key = "main_navigation",
                            Type = "string",
                            Value = "1"
                        },
                        new
                        {
                            Id = 5,
                            Flags = "PUBLIC",
                            Group = "site",
                            Key = "footer_nagivation",
                            Type = "string",
                            Value = "1"
                        },
                        new
                        {
                            Id = 6,
                            Flags = "PUBLIC",
                            Group = "site",
                            Key = "logo",
                            Type = "string",
                            Value = ""
                        },
                        new
                        {
                            Id = 7,
                            Flags = "PUBLIC",
                            Group = "site",
                            Key = "icon",
                            Type = "string",
                            Value = ""
                        },
                        new
                        {
                            Id = 8,
                            Flags = "PUBLIC",
                            Group = "site",
                            Key = "facebook",
                            Type = "string",
                            Value = ""
                        },
                        new
                        {
                            Id = 9,
                            Flags = "PUBLIC",
                            Group = "site",
                            Key = "meta_title",
                            Type = "string",
                            Value = ""
                        },
                        new
                        {
                            Id = 10,
                            Flags = "PUBLIC",
                            Group = "site",
                            Key = "meta_description",
                            Type = "string",
                            Value = ""
                        });
                });

            modelBuilder.Entity("BelowDeckAPI.Models.Persistence.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("BelowDeckAPI.Models.Persistence.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Bio")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Profile_Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("location")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "af0f9a51-1688-4df6-8f3d-eb0af64a8ba6",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5322b99a-07e6-41f8-b462-8eca5d95429b",
                            Email = "admin@admin.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Administrator",
                            NormalizedEmail = "admin@admin.com",
                            NormalizedUserName = "admin",
                            PasswordHash = "AQAAAAEAACcQAAAAEAJqU4EnXfAIUFVzkg6Gn9q3Lntf1tV3FTQkF+4NHYkyJvNbY61Ov76A6eeZaNrZKA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUserRole<string>");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("BelowDeckAPI.Models.Persistence.UserRole", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUserRole<string>");

                    b.HasDiscriminator().HasValue("UserRole");

                    b.HasData(
                        new
                        {
                            UserId = "af0f9a51-1688-4df6-8f3d-eb0af64a8ba6",
                            RoleId = "79d660d1-4e76-4e12-88a6-82751a9fd6a9"
                        });
                });

            modelBuilder.Entity("BelowDeckAPI.Models.Persistence.MenuItem", b =>
                {
                    b.HasOne("BelowDeckAPI.Models.Persistence.Menu", "Menu")
                        .WithMany("MenuItems")
                        .HasForeignKey("MenuId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BelowDeckAPI.Models.Persistence.Post", "Post")
                        .WithMany()
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Menu");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("BelowDeckAPI.Models.Persistence.Post", b =>
                {
                    b.HasOne("BelowDeckAPI.Models.Persistence.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BelowDeckAPI.Models.Persistence.PostType", "PostType")
                        .WithMany()
                        .HasForeignKey("PostTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BelowDeckAPI.Models.Persistence.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Category");

                    b.Navigation("PostType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BelowDeckAPI.Models.Persistence.PostTag", b =>
                {
                    b.HasOne("BelowDeckAPI.Models.Persistence.Post", "Post")
                        .WithMany("PostTags")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BelowDeckAPI.Models.Persistence.Tag", "Tag")
                        .WithMany()
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("BelowDeckAPI.Models.Persistence.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("BelowDeckAPI.Models.Persistence.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("BelowDeckAPI.Models.Persistence.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("BelowDeckAPI.Models.Persistence.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BelowDeckAPI.Models.Persistence.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("BelowDeckAPI.Models.Persistence.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BelowDeckAPI.Models.Persistence.Menu", b =>
                {
                    b.Navigation("MenuItems");
                });

            modelBuilder.Entity("BelowDeckAPI.Models.Persistence.Post", b =>
                {
                    b.Navigation("PostTags");
                });
#pragma warning restore 612, 618
        }
    }
}
